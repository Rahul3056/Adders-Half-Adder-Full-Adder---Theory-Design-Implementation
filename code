
// Half Adder Module
module half_adder (
    input wire A, B,
    output wire Sum, Carry
);
    assign Sum = A ^ B;    // XOR for Sum
    assign Carry = A & B;  // AND for Carry
endmodule

// Full Adder Module
module full_adder (
    input wire A, B, Cin,
    output wire Sum, Carry
);
    assign Sum = A ^ B ^ Cin;  // XOR for Sum
    assign Carry = (A & B) | (Cin & (A ^ B)); // Carry Logic
endmodule

// Testbench
module testbench;
    reg A, B, Cin;
    wire Sum_HA, Carry_HA;
    wire Sum_FA, Carry_FA;

    half_adder HA (.A(A), .B(B), .Sum(Sum_HA), .Carry(Carry_HA));
    full_adder FA (.A(A), .B(B), .Cin(Cin), .Sum(Sum_FA), .Carry(Carry_FA));

    initial begin
        $monitor("A=%b B=%b Cin=%b | HA: Sum=%b Carry=%b | FA: Sum=%b Carry=%b", 
                 A, B, Cin, Sum_HA, Carry_HA, Sum_FA, Carry_FA);

        // Test cases
        A = 0; B = 0; Cin = 0; #10;
        A = 0; B = 1; Cin = 0; #10;
        A = 1; B = 0; Cin = 1; #10;
        A = 1; B = 1; Cin = 1; #10;
        
        $finish;
    end
endmodule
```
